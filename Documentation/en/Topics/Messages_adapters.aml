<?xml version="1.0" encoding="utf-8"?>
<topic id="fb79e67d-945c-493d-bdac-85d0040af828" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
       <para>
       The messaging allows you to create your own connections to any external trading system. 
       To do this, you shall create your own <legacyBold>message adapter</legacyBold> class inherited from the 
       abstract<codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference> class.
       
       </para>
       <para>
       	When developing your own message adapter, you need to solve the following tasks:
       </para>
       
		<list class="ordered">
  			<listItem>
  				<para>Write a code that translates incoming <token>stocksharp</token> messages into external system commands.</para>
  			</listItem>
  			<listItem>
  				<para>Write a code that converts information from an external system into outgoing messages.</para>
  			</listItem>
  			<listItem>
  				<para>Convert the encoded information of the external system (codes of instruments and boards, enumerations, etc.) to <token>stocksharp</token> types.
  				</para>
  			</listItem>
  			<listItem>
  				<para>Perform additional settings related to the features of the external trading system.</para>
  			</listItem>
		</list>
		
       <para>
       Before we start describing how to develop your own adapter, 
       let's look at how to create and process incoming and outgoing messages in <token>stocksharp</token> using the 
       <codeEntityReference>T:StockSharp.Messages.ConnectMessage</codeEntityReference> as an example.
       Suppose that the 
       <codeEntityReference>M:StockSharp.Algo.Connector.Connect</codeEntityReference>
       method was called in the program, then the following will happen in the base 
       <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> class:
     
		</para>
		<list class="ordered">
  			<listItem>
  				<para>The protected <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.OnConnect</codeEntityReference>
  				method is called, in which a message is generated and passed to the
  				<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.SendInMessage(StockSharp.Messages.Message)</codeEntityReference> method.
  				</para>
  				<code language="C#">
protected virtual void OnConnect()
{
	SendInMessage(new ConnectMessage());
}
  				</code>
  			</listItem>
  			<listItem>
  			<para> In the <codeEntityReference qualifyHint="true">method M:StockSharp.Algo.Connector.Send In Message(StockSharp.Messages.Message)</codeEntityReference>
the message is passed to the adapter method of the same name. 			
  		</para>
  			<code language="C#">
public void SendInMessage(Message message)
{
	_inAdapter.SendInMessage(message);
}
  			</code>
  			</listItem>
  			<listItem>  				
  				<para>Additional checks are performed in the adapter's <codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.SendInMessage(StockSharp.Messages.Message)</codeEntityReference> method.
  				If everything is fine, then the message is passed to the <codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference> 
  				method (see below).
  				If an error is generated, a new outgoing message of the same type is created, the exception object is passed to the <codeEntityReference>P:StockSharp.Messages.BaseConnectionMessage.Error</codeEntityReference>
  				property of the message.
  				This new message is passed to the <codeEntityReference>M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)</codeEntityReference>
  				 method, which will generate a new outgoing message event - 
  				 <codeEntityReference>E:StockSharp.Messages.MessageAdapter.NewOutMessage</codeEntityReference>, that signals an error.
  				  				</para>
  			</listItem>
		</list>
		
		<para>
		Outgoing messages are created using the <codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)</codeEntityReference>
		method, to which a message object is passed. This method generates a new outgoing message event - 
		<codeEntityReference>E:StockSharp.Messages.MessageAdapter.NewOutMessage</codeEntityReference>. 
		This event is then handled in the connector base class in the protected 
		<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.OnProcessMessage(StockSharp.Messages.Message)</codeEntityReference>
		method, where, depending on the situation, the message is converted
		to the appropriate <token>stocksharp</token> type and a connector event is generated, and additional incoming messages can also be generated.
		
		</para>
		
		<para>
		The following describes the process for creating your own adapter for <token>bitstamp</token> (the connector is available with the source codes).  
		</para>
		
    </introduction>
    
    <procedure>
			<title>Example of creating a BitStamp message adapter</title>
			<steps class="ordered">
			   <step>
					<content>
						<para>
						<legacyBold>Creating an adapter class.</legacyBold>
						</para>
						<para>
						First, we create the <legacyBold>BitStampMessageAdapter</legacyBold> message adapter class inherited from the abstract <codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference> class:
						</para>
						<code language="C#">
public class BitStampMessageAdapter : MessageAdapter 
{
}						
						
</code>
					</content>
				</step>
				<step>
					<content>
						<para>
						<legacyBold>Adapter constructor.</legacyBold>
						</para>
						<list class="bullet">
  							<listItem>
  								<para>A transaction ID generator is passed to the adapter constructor, which will be used to generate message IDs.</para>
  							</listItem>
  							<listItem>
  								<para>
  								Using the<codeEntityReference>M:StockSharp.Messages.Extensions.AddSupportedMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypeInfo)</codeEntityReference>
  								method, we add the message types that the adapter will support to the 
  								<codeEntityReference>P:StockSharp.Messages.MessageAdapter.SupportedInMessages</codeEntityReference>array
  								</para>
  							</listItem>
						</list>
	
						<code language="C#">
						<![CDATA[
public BitStampMessageAdapter(IdGenerator transactionIdGenerator)
	: base(transactionIdGenerator)
{
	// to maintain the connection, ping every 10 seconds
	HeartbeatInterval = TimeSpan.FromSeconds(10);

	// the adapter supports both transactions and market data
	this.AddMarketDataSupport();
	this.AddTransactionalSupport();
	
	// deleting unsupported message types (all possible transactional messages were added via AddTransactionalSupport)
	this.RemoveSupportedMessage(MessageTypes.Portfolio);
	this.RemoveSupportedMessage(MessageTypes.OrderReplace);

	// the adapter supports ticks, glasses, and logs
	this.AddSupportedMarketDataType(DataType.Ticks);
	this.AddSupportedMarketDataType(DataType.MarketDepth);
	//this.AddSupportedMarketDataType(DataType.Level1);
	this.AddSupportedMarketDataType(DataType.OrderLog);

	// the adapter supports result messages for searching for tools, positions, and bids
	this.AddSupportedResultMessage(MessageTypes.SecurityLookup);
	this.AddSupportedResultMessage(MessageTypes.PortfolioLookup);
	this.AddSupportedResultMessage(MessageTypes.OrderStatus);
}
						
]]></code>
					</content>
				</step>
				<step>
					<content>
					<para>
					 <codeEntityReference>M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference> method.
					</para>
						<para>
						Next, you need to override the 
						<codeEntityReference>M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference> method.
						As mentioned above, all incoming messages are passed to this method, and for each message type you need to write code that converts the messages into 
						<token>bitstamp</token> commands.

					    Далее необходимо переопределить метод 
					     
					    Как говорилось выше, в этот метод передаются все входящие сообщения и для каждого типа сообщения нужно написать код, 
					    преобразующий сообщения в команды 
						</para>
						<para>When the <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.Reset</codeEntityReference> message is received, it is required to reset the state and free up resources. 
						When these operations are complete, it is required to send an outgoing <codeEntityReference>T:StockSharp.Messages.ResetMessage</codeEntityReference> message.
								
						</para>
						<para>When a
						<codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.Connect</codeEntityReference> 
						message arrives, we initialize the _httpClient and _pusherClient variables, subscribe to <token>bitstamp</token> events, and establish a connection using the native API's <legacyBold>Connect</legacyBold> method.
						If the connection is successful, the <legacyBold>SessionOnPusherConnected</legacyBold> event should occur.
						 
						</para>

						<code language="C#">
						<![CDATA[
private void SubscribePusherClient()
{
	_pusherClient.Connected += SessionOnPusherConnected;
	_pusherClient.Disconnected += SessionOnPusherDisconnected;
	_pusherClient.Error += SessionOnPusherError;
	_pusherClient.NewOrderBook += SessionOnNewOrderBook;
	_pusherClient.NewOrderLog += SessionOnNewOrderLog;
	_pusherClient.NewTrade += SessionOnNewTrade;
}

private void UnsubscribePusherClient()
{
	_pusherClient.Connected -= SessionOnPusherConnected;
	_pusherClient.Disconnected -= SessionOnPusherDisconnected;
	_pusherClient.Error -= SessionOnPusherError;
	_pusherClient.NewOrderBook -= SessionOnNewOrderBook;
	_pusherClient.NewOrderLog -= SessionOnNewOrderLog;
	_pusherClient.NewTrade -= SessionOnNewTrade;
}
		
protected override bool OnSendInMessage(Message message)
{
    switch (message.Type)
    {
         case MessageTypes.Reset:
         {
         	_lastMyTradeId = 0;
			_lastTimeBalanceCheck = null;

			if (_httpClient != null)
			{
				try
				{
					_httpClient.Dispose();
				}
				catch (Exception ex)
				{
					SendOutError(ex);
				}

				_httpClient = null;
			}

			if (_pusherClient != null)
			{
				try
				{
					UnsubscribePusherClient();
					_pusherClient.Disconnect();
				}
				catch (Exception ex)
				{
					SendOutError(ex);
				}

				_pusherClient = null;
			}

			SendOutMessage(new ResetMessage());

          	break;
        }

        case MessageTypes.Connect:
        {
            if (_httpClient != null)
				throw new InvalidOperationException(LocalizedStrings.Str1619);

			if (_pusherClient != null)
				throw new InvalidOperationException(LocalizedStrings.Str1619);

			_httpClient = new HttpClient(ClientId, Key, Secret, AuthV2) { Parent = this };

			_pusherClient = new PusherClient { Parent = this };
			SubscribePusherClient();
			_pusherClient.Connect();

            break;
        }

        case MessageTypes.Disconnect:
        {
            if (_httpClient == null)
				throw new InvalidOperationException(LocalizedStrings.Str1856);

			if (_pusherClient == null)
				throw new InvalidOperationException(LocalizedStrings.Str1856);

			_httpClient.Dispose();
			_httpClient = null;

			_pusherClient.Disconnect();

            break;
        }
        
        case MessageTypes.PortfolioLookup:
		{
			ProcessPortfolioLookup((PortfolioLookupMessage)message);
			break;
		}

		case MessageTypes.OrderStatus:
		{
			ProcessOrderStatus((OrderStatusMessage)message);
			break;
		}

		case MessageTypes.OrderRegister:
		{
			ProcessOrderRegister((OrderRegisterMessage)message);
			break;
		}

		case MessageTypes.OrderCancel:
		{
			ProcessOrderCancel((OrderCancelMessage)message);
			break;
		}

		case MessageTypes.OrderGroupCancel:
		{
			ProcessOrderGroupCancel((OrderGroupCancelMessage)message);
			break;
		}
				
		case MessageTypes.SecurityLookup:
		{
			ProcessSecurityLookup((SecurityLookupMessage)message);
			break;
		}

		case MessageTypes.MarketData:
		{
			ProcessMarketData((MarketDataMessage)message);
			break;
		}
				
		default:
			return false;
	}

	return true;
}

private void SessionOnPusherConnected()
{
	SendOutMessage(new ConnectMessage());
}

private void SessionOnPusherError(Exception exception)
{
	SendOutError(exception);
}

private void SessionOnPusherDisconnected(bool expected)
{
	SendOutDisconnectMessage(expected);
}
]]>		
						</code>
					</content>
				</step>
				<step>
				<content>
					<para>
					 <legacyBold>SessionOnPusherConnected</legacyBold> event.
					</para>
					<para>
					It is required to send an outgoing <codeEntityReference>T:StockSharp.Messages.ConnectMessage</codeEntityReference>
					message in the native API connection event handler.
					When processing this message in the <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> class code, 
					the following message types will be checked in <codeEntityReference>P:StockSharp.Messages.MessageAdapter.SupportedInMessages</codeEntityReference>:
					
					 </para>
					<list class="bullet">
  						<listItem>
  							<para>
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.PortfolioLookup</codeEntityReference> - whether
  								<codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference>  message necessary for obtaining portfolios and positions.
  							</para>
  						</listItem>
  						<listItem>
  							<para>  						
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.SecurityLookup</codeEntityReference> - whether
  								<codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference> message necessary for obtaining instruments.
  							</para>
  						</listItem>
  						<listItem>
  							<para>
  							OrderStatus -  OrderStatusMessage 
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.OrderStatus</codeEntityReference> - whether 
  								<codeEntityReference>T:StockSharp.Messages.OrderStatusMessage</codeEntityReference> message necessary for obtaining orders and own trades.
  							</para>
  						</listItem>
					</list>
					<para>
					If the message types are set on the adapter, then the corresponding messages will be sent. 
					In our example (see Adapter Constructor), the 
					<codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.SecurityLookup</codeEntityReference>
					and <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.PortfolioLookup</codeEntityReference> 
					types have been added to this list,
					so you should expect to receive incoming <codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference> and
					 <codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference>.
					
					</para>
					<code language="C#">
						<![CDATA[
private void SessionOnPusherConnected()
{
	SendOutMessage(new ConnectMessage());
}
						]]>	
					</code>
				</content>
				</step>
				<step>
				<content>
				<para>
				<codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference> and <codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference> incoming messages.
 
						
				</para>
				<para>
				Upon receipt of these messages, it is necessary to call the <token>bitstamp</token> functions requesting portfolios and instruments, respectively. 
				And after receiving all the data, you need to send the <codeEntityReference>T:StockSharp.Messages.SubscriptionFinishedMessage</codeEntityReference> message.
				Note that the subscription ID is assigned to both the resulting message and the data messages:	
				
				</para>
				<code language="C#">
						<![CDATA[
// Requesting a list of portfolios
private void ProcessPortfolioLookup(PortfolioLookupMessage message)
{
	if (!message.IsSubscribe)
		return;

	var transactionId = message.TransactionId;

	var pfName = PortfolioName;

	SendOutMessage(new PortfolioMessage
	{
		PortfolioName = pfName,
		BoardCode = Extensions.BitStampBoard,
		OriginalTransactionId = transactionId, // <- the subscription ID
	});
	
	var account = _httpClient.GetAccount(section);

	SendOutMessage(new PositionChangeMessage
	{
		SecurityId = SecurityId.Money, // <- for a money position set the special code of the Money tool
		PortfolioName = GetPortfolioName(section),
		ServerTime = time,	
	}
	.TryAdd(PositionChangeTypes.Leverage, (decimal?)account.MarginLevel)
	.TryAdd(PositionChangeTypes.CommissionTaker, (decimal?)account.TakerCommissionRate)
	.TryAdd(PositionChangeTypes.CommissionMaker, (decimal?)account.MakerCommissionRate));

	var tuple = _httpClient.GetBalances();

	foreach (var pair in tuple.Item1)
	{
		var currValue = pair.Value.First;
		var currPrice = pair.Value.Second;
		var blockValue = pair.Value.Third;

		if (currValue == null && currPrice == null && blockValue == null)
			continue;

		var msg = this.CreatePositionChangeMessage(pfName, pair.Key.ToUpperInvariant().ToStockSharp(false));

		msg
		.TryAdd(PositionChangeTypes.CurrentValue, currValue, true)
		.TryAdd(PositionChangeTypes.CurrentPrice, currPrice, true)
		.TryAdd(PositionChangeTypes.BlockedValue, blockValue, true);

		SendOutMessage(msg);	
	}
	
	SendSubscriptionResult(message); // <- end of subscription (if To == null, then it is sent that the subscription went Online, otherwise Finished)
	
	if (message.To == null) // subscribe not only to stories, but also to online
		_pusher.SubscribeAccount();
}

// The requested tools
private void ProcessSecurityLookup(SecurityLookupMessage lookupMsg)
{
	var secTypes = lookupMsg.GetSecurityTypes();

	foreach (var info in _httpClient.GetPairsInfo())
	{
		var secMsg = new SecurityMessage
		{
			SecurityId = info.Name.ToStockSharp(),
			SecurityType = info.UrlSymbol == _eurusd ? SecurityTypes.Currency : SecurityTypes.CryptoCurrency,
			MinVolume = info.MinimumOrder.Substring(0, info.MinimumOrder.IndexOf(' ')).To<decimal>(),
			Decimals = info.BaseDecimals,
			Name = info.Description,
			VolumeStep = info.UrlSymbol == _eurusd ? 0.00001m : 0.00000001m,
			OriginalTransactionId = lookupMsg.TransactionId, // <- the subscription ID
		};

		if (!secMsg.IsMatch(lookupMsg, secTypes))
			continue;

		SendOutMessage(secMsg);
	}

	SendSubscriptionResult(lookupMsg); // <- the completion of the subscription
}
						
						]]>	
				</code>
				
				</content>
				</step>
				<step>
				<content>
				<para>
					Numeration or position changes received from an external system.

				</para>
                <para>In the event handler, the received portfolio information should be converted into the outgoing <codeEntityReference>T:StockSharp.Messages.PositionChangeMessage</codeEntityReference> message:
					
				</para>
				<code language="C#">
				<![CDATA[
		private void SessionOnAccountUpdated(AccountUpdate account)
		{
			var time = account.LastAccountUpdate ?? account.EventTime;
			var futData = account.FuturesData;

			if (account.Balances != null)
			{
				foreach (var balance in account.Balances)
				{
					SendOutMessage(new PositionChangeMessage
					{
						PortfolioName = GetPortfolioName(section),
						SecurityId = balance.Asset.InternalCreateSecurityId(),
						ServerTime = time,
					}
					.TryAdd(PositionChangeTypes.CurrentValue, (decimal)balance.Free, true)
					.TryAdd(PositionChangeTypes.BlockedValue, (decimal)balance.Locked, true));
				}
			}
			else if (futData != null)
			{
				foreach (var balance in futData.Balances)
				{
					SendOutMessage(new PositionChangeMessage
					{
						PortfolioName = GetPortfolioName(section),
						SecurityId = balance.Asset.InternalCreateSecurityId(),
						ServerTime = time,
					}
					.TryAdd(PositionChangeTypes.CurrentValue, (decimal)balance.Balance, true));
				}

				foreach (var position in futData.Positions)
				{
					SendOutMessage(new PositionChangeMessage
					{
						PortfolioName = GetPortfolioName(),
						SecurityId = position.Symbol.ToStockSharp(),
						ServerTime = time,
					}
					.TryAdd(PositionChangeTypes.CurrentValue, (decimal)position.Amount, true)
					.TryAdd(PositionChangeTypes.AveragePrice, (decimal?)position.EntryPrice, true)
					.TryAdd(PositionChangeTypes.RealizedPnL, (decimal?)position.RealizedPnL, true)
					.TryAdd(PositionChangeTypes.UnrealizedPnL, (decimal?)position.UnrealizedPnL, true)
					);
				}
			}
		}]]>	
				</code>
				</content>
				</step>
				
				<step>
				<content>
				<para>
				 <legacyBold>Tick data subscription</legacyBold>
				</para>
				<para>
				When the <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.Subscribe(StockSharp.Algo.Subscription)</codeEntityReference> 
or <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.UnSubscribe(StockSharp.Algo.Subscription)</codeEntityReference> methods are called the incoming <codeEntityReference>T:StockSharp.Messages.MarketDataMessage</codeEntityReference> message will be generated.

				 </para>
				 <para>When processing this message, you should call the <token>bitstamp</token> methods by subscribing or unsubscribing from receiving tick trades.
				  </para>
				 <para>
				 Since the message is used to work with all types of market data, the <codeEntityReference>P:StockSharp.Messages.MarketDataMessage.DataType2</codeEntityReference> property should be used to select a specific type. 
				 For trades, this property value is equal to <codeEntityReference qualifyHint="true">P:StockSharp.Messages.DataType.Ticks</codeEntityReference>.

				 
				</para>
				<para>After calling the <legacyBold>SubscribeTrades</legacyBold> method, trades will arrive in the <legacyBold>SessionOnNewTrade</legacyBold> event.
				  
				 </para>
				
				<code language="C#">
                <![CDATA[
		private void ProcessMarketData(MarketDataMessage mdMsg)
		{
			if (!mdMsg.SecurityId.IsAssociated())
			{
				SendSubscriptionNotSupported(mdMsg.TransactionId);
				return;
			}

			var currency = mdMsg.SecurityId.ToCurrency();

			if (mdMsg.DataType2 == DataType.OrderLog)
			{
				if (mdMsg.IsSubscribe)
					_pusherClient.SubscribeOrderLog(currency);
				else
					_pusherClient.UnSubscribeOrderLog(currency);
			}
			else if (mdMsg.DataType2 == DataType.MarketDepth)
			{
				if (mdMsg.IsSubscribe)
					_pusherClient.SubscribeOrderBook(currency);
				else
					_pusherClient.UnSubscribeOrderBook(currency);
			}
			else if (mdMsg.DataType2 == DataType.Ticks)
			{
				if (mdMsg.IsSubscribe)
				{
					if (mdMsg.To != null)
					{
						SendSubscriptionReply(mdMsg.TransactionId);

						var diff = DateTimeOffset.Now - (mdMsg.From ?? DateTime.Today);

						string interval;

						if (diff.TotalMinutes < 1)
							interval = "minute";
						else if (diff.TotalDays < 1)
							interval = "hour";
						else
							interval = "day";

						var trades = _httpClient.RequestTransactions(currency, interval);

						foreach (var trade in trades.OrderBy(t => t.Time))
						{
							SendOutMessage(new ExecutionMessage
							{
								ExecutionType = ExecutionTypes.Tick,
								SecurityId = mdMsg.SecurityId,
								TradeId = trade.Id,
								TradePrice = (decimal)trade.Price,
								TradeVolume = trade.Amount.ToDecimal(),
								ServerTime = trade.Time,
								OriginSide = trade.Type.ToSide(),
								OriginalTransactionId = mdMsg.TransactionId
							});
						}

						SendSubscriptionResult(mdMsg);
						return;
					}
					else
						_pusherClient.SubscribeTrades(currency);
				}
				else
				{
					_pusherClient.UnSubscribeTrades(currency);
				}
			}
			else
			{
				SendSubscriptionNotSupported(mdMsg.TransactionId);
				return;
			}

			SendSubscriptionReply(mdMsg.TransactionId);
		}
				
]]>
				</code>
			</content>
			</step>
			<step>
				<content>
				<para>
					<legacyBold>SessionOnNewTrade</legacyBold> event.
				</para>
				<para>
				In the event handler <legacyBold>Session On New Trade</legacyBold> the received information about the transaction
must be converted to an outgoing message <codeEntityReference>T:StockSharp.Messages.Execution Message</codeEntityReference>.
Note that the <codeEntityReference>T:StockSharp.Messages.ExecutionMessage</codeEntityReference> is used both for transactions (private or anonymous) and for orders.
Therefore, the message specifies that it relates to the transaction -
<codeEntityReference>P:StockSharp.Messages.ExecutionMessage.ExecutionType</codeEntityReference> = 
  				<codeEntityReference qualifyHint="true">F:StockSharp.Messages.ExecutionTypes.Tick</codeEntityReference>.
				
				</para>
				<code language="C#">
				<![CDATA[
private void SessionOnNewTrade(string pair, Trade trade)
{
	SendOutMessage(new ExecutionMessage
	{
		ExecutionType = ExecutionTypes.Tick,
		SecurityId = pair.ToStockSharp(),
		TradeId = trade.Id,
		TradePrice = (decimal)trade.Price,
		TradeVolume = (decimal)trade.Amount,
		ServerTime = trade.Time,
		OriginSide = trade.Type.ToSide(),
	});
}


		  ]]>	
			   </code>
			</content>
				</step>
				<step>
					<content>
						<para>
						The code for handling orders (cancel-register), as well as the full adapter code, can be obtained from the <token>stocksharpgithub</token> repository.						</para>
					</content>
				</step>
			</steps>
		</procedure>
    
  </developerConceptualDocument>
</topic>



