<?xml version="1.0" encoding="utf-8"?>
<topic id="760eabd4-07f6-452a-852e-1060e63150d2" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Starting with 5.0 version, <link xlink:href="e0f9d08e-5dba-4d5d-9248-4d37eba61b22" /> offers a new data acquisition model (market and transactional data). 
      The model is based on subscriptions and has advantages over regular subscription requests:
     
    </para>
      <list class="bullet">
		<listItem>
			Subscriptions are isolated from each other, so you can run an arbitrary number of subscriptions in parallel (with a history request or not).
		</listItem>
		<listItem>
			Subscriptions have states that make it possible to understand whether historical data is being received at the moment, or whether the subscription has gone online.
		</listItem>
		<listItem>
			Subscriptions have a universal approach, and their code is the same regardless of the requested data types.
		</listItem>
	</list>
	<para>To work with subscriptions, you should use the <codeEntityReference>T:StockSharp.Algo.Subscription</codeEntityReference>  class. Below is an example of subscribing to candles via the new model:</para>
	<code language="C#">
			<![CDATA[
...
var subscription = new Subscription(new MarketDataMessage
{
	DataType2 = DataType.TimeFrame(TimeSpan.FromMinutes(5)),
	From = DateTimeOffset.Now.Subtract(TimeSpan.FromDays(30)),

	// null means make subscriptions goes online after historical data
	To = null,
}, (SecurityMessage)sec);

// subscribe to events
_connector.CandleReceived += (sub, candle) =>
{
	if (sub != subscription)
		return;

	Console.WriteLine(candle);
};
_connector.SubscriptionOnline += (sub) =>
{
	if (sub != subscription)
		return;

	Console.WriteLine("Online");
};
_connector.SubscriptionFailed += (sub, error, isSubscribe) =>
{
	if (sub != subscription)
		return;

	Console.WriteLine(error);
};

// start subscription
_connector.Subscribe(subscription);
...
			]]>
	</code>
	<para>Subscription states:</para>
	<list class="bullet">
		<listItem>
		  <codeEntityReference>F:StockSharp.Algo.SubscriptionStates.Stopped</codeEntityReference> - the subscription is inactive (stopped or did not start).
	    </listItem>
		<listItem>
		  <codeEntityReference>F:StockSharp.Algo.SubscriptionStates.Active</codeEntityReference> - the subscription is active, and it can transfer historical data until it goes online or is completed.
	    </listItem>
	    <listItem>
		  <codeEntityReference>F:StockSharp.Algo.SubscriptionStates.Error</codeEntityReference> - the subscription is inactive and in an error state.
	    </listItem>
	    <listItem>
		  <codeEntityReference>F:StockSharp.Algo.SubscriptionStates.Finished</codeEntityReference> - the subscription has finished its work (all data has been received).
	    </listItem>
	    <listItem>
		  <codeEntityReference>F:StockSharp.Algo.SubscriptionStates.Online</codeEntityReference> - the subscription has gone online and only transfers data in real time.
	    </listItem>
	</list>
    </introduction>
  </developerConceptualDocument>
</topic>